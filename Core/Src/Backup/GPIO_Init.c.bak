#include <GPIO_Init.h>

void GPIO_Init(void) {
    // Enable clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN        // Enable GPIOA
              | RCC_AHB2ENR_GPIOBEN        // Enable GPIOB
              | RCC_AHB2ENR_GPIOCEN;       // Enable GPIOC

    // Configure PC6 as output for the LED
    // Clear mode bits for PC6
    GPIOC->MODER &= ~(GPIO_MODER_MODE6);
    // Set PC6 to General purpose output mode (01)
    GPIOC->MODER |= GPIO_MODER_MODE6_0;

    // GPIO Setting for Compare Outputs of TIM1
    // Function | Pin | Port | Notes
    // PWM_U_H | PA8 | A | TIM1_CH1
    // PWM_U_L | PC13 | C | TIM1_CH1N | AF4
    // PWM_V_H | PA9 | A | TIM1_CH2
    // PWM_V_L | PA12 | A | TIM1_CH2N
    // PWM_W_H | PA10 | A | TIM1_CH3
    // PWM_W_L | PB15 | B | TIM1_CH3N | AF4

    // Set all used GPIOs to Alternate Function mode (AF6 for TIM1)
    // Configure PC13, PA8, PA9, PA10, PA12, and PB15

    // PA8, PA9, PA10, PA12
    GPIOA->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9 |
        GPIO_MODER_MODE10 | GPIO_MODER_MODE12);                // Clear mode bits
    GPIOA->MODER |=  (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1 |
        GPIO_MODER_MODE10_1 | GPIO_MODER_MODE12_1);            // AF mode

    GPIOA->AFR[1] |= (6 << GPIO_AFRH_AFSEL8_Pos)               // PA8  = AF6 (CH1)
    | (6 << GPIO_AFRH_AFSEL9_Pos)                              // PA9  = AF6 (CH2)
    | (6 << GPIO_AFRH_AFSEL10_Pos)                             // PA10 = AF6 (CH3)
    | (6 << GPIO_AFRH_AFSEL12_Pos);                            // PA12 = AF6 (CH2N)

    // PB15
    GPIOB->MODER &= ~(GPIO_MODER_MODE15);                      // Clear mode bits
    GPIOB->MODER |=  (GPIO_MODER_MODE15_1);                    // AF mode

    GPIOB->AFR[1] |= (4<< GPIO_AFRH_AFSEL15_Pos);             // PB15 = AF4 (CH3N)

    // PC13
    GPIOC->MODER &= ~(GPIO_MODER_MODE13);                      // Clear mode bits
    GPIOC->MODER |=  (GPIO_MODER_MODE13_1);                    // AF mode

    GPIOC->AFR[1] |= (4 << GPIO_AFRH_AFSEL13_Pos);             // PC13 = AF4 (CH1N)

    // Set speed to high (to reduce rise/fall time)
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9 |
        GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED12;
    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED15;
    GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED13;

    // Optional: push-pull, no pull-up/down
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9 |
        GPIO_OTYPER_OT10 | GPIO_OTYPER_OT12);                  // Push-pull
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9 |
        GPIO_PUPDR_PUPD10 | GPIO_PUPDR_PUPD12);                // No pull-up/down

    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT15);                      // Push-pull
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD15);                      // No pull-up/down

    GPIOC->OTYPER &= ~(GPIO_OTYPER_OT13);                      // Push-pull
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13);                      // No pull-up/down


    // configure switch as input on PC10 for ESC Board or PC13 for WeAct Board
    GPIOC->MODER &= ~(GPIO_MODER_MODE13);                      // Clear mode bits
    // Enable pull-down resistor
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13);                     // No pull-up/down
    GPIOC->PUPDR |= GPIO_PUPDR_PUPD13_1;                      // Pull-down

}
//#include <GPIO_Init.h>

//
//void GPIO_Init(void) {
//    // Enable clock
//    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN        // Enable GPIOA
//              | RCC_AHB2ENR_GPIOBEN        // Enable GPIOB
//              | RCC_AHB2ENR_GPIOCEN;       // Enable GPIOC
//
//    // Configure PC13 as output for the LED
//    // Clear mode bits for PC13
//    GPIOC->MODER &= ~(GPIO_MODER_MODE13);
//    // Set PC13 to General purpose output mode (01)
//    GPIOC->MODER |= GPIO_MODER_MODE13_0;
//
//    // GPIO Setting for Compare Outputs of TIM1
//    // Function | Pin | Port | Notes
//    // PWM_U_H | PA8 | A | TIM1_CH1
//    // PWM_U_L | PA7 | A | TIM1_CH1N
//    // PWM_V_H | PA9 | A | TIM1_CH2
//    // PWM_V_L | PB0 | B | TIM1_CH2N
//    // PWM_W_H | PA10 | A | TIM1_CH3
//    // PWM_W_L | PB1 | B | TIM1_CH3N
//
//    // Set all used GPIOs to Alternate Function mode (AF6 for TIM1)
//    // Configure PA7, PA8, PA9, PA10 and PB0, PB1
//
//    // PA7, PA8, PA9, PA10
//    GPIOA->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8 |
//        GPIO_MODER_MODE9 | GPIO_MODER_MODE10);                  // Clear mode bits
//    GPIOA->MODER |=  (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1 |
//        GPIO_MODER_MODE9_1 | GPIO_MODER_MODE10_1);              // AF mode
//
//    GPIOA->AFR[0] |= (6 << GPIO_AFRL_AFSEL7_Pos);               // PA7  = AF6 (CH1N)
//    GPIOA->AFR[1] |= (6 << GPIO_AFRH_AFSEL8_Pos)                // PA8  = AF6 (CH1)
//    | (6 << GPIO_AFRH_AFSEL9_Pos)                              // PA9  = AF6 (CH2)
//    | (6 << GPIO_AFRH_AFSEL10_Pos);                             // PA10 = AF6 (CH3)
//
//    // PB0, PB1
//    GPIOB->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);     // Clear mode bits
//    GPIOB->MODER |=  (GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1); // AF mode
//
//    GPIOB->AFR[0] |= (6 << GPIO_AFRL_AFSEL0_Pos)                // PB0 = AF6 (CH2N)
//    | (6 << GPIO_AFRL_AFSEL1_Pos);                             // PB1 = AF6 (CH3N)
//
//    // OSet speed to high (to reduce rise/fall time)
//    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8 |
//        GPIO_OSPEEDR_OSPEED9 | GPIO_OSPEEDR_OSPEED10;
//    GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1;
//
//    // Optional: push-pull, no pull-up/down
//    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8 |
//        GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10);                   // Push-pull
//    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8 |
//        GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10);                  // No pull-up/down
//
//    GPIOB->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);      // Push-pull
//    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);     // No pull-up/down
//
//
//}


