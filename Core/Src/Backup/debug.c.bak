/*
 * debug.c
 *
 *  Created on: May 8, 2025
 *      Author: acweiss
 */

#include "main.h"
#include "debug.h"
#include <stdio.h>

void print_debug_info(SvpwmData *d) {
	if (!d)
		return;
	printf(
			"ERR:%d grad:%.3f sec:%d soll:%d T0:%f T1:%f T2:%f Ch:%d,%d,%d Va:%f Vb:%f VBus:%f\r\n",
			d->error, d->grad, d->sector, d->sector_soll, d->T0, d->T1, d->T2,
			d->ChA, d->ChB, d->ChC, d->Va, d->Vb, d->VBus);
}

// create a debug method that toggles all outputs to verify the Logic analizer attached
// set all pins used for PWM to normal output mode
// the function does not return, it toggles the outputs in an infinite loop
void debug_toggle_pwm_outputs(void) {

	// Enable clock for GPIOA, GPIOB, GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN;

	HAL_Delay(10); // Wait for GPIO clocks to stabilize
	// LED (both boards use PC6 here)
	GPIOC->MODER &= ~(GPIO_MODER_MODE6);          // Clear mode bits for PC6
	GPIOC->MODER |= GPIO_MODER_MODE6_0; // PC6: General purpose output mode (01)

	// Clear PA8, PA9, PA10, PA12, PB14, PB15, PC13 (startup default is 0x11 = analog Input)
	GPIOA->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9 | GPIO_MODER_MODE10 | GPIO_MODER_MODE12);
	GPIOB->MODER &= ~(GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
	GPIOC->MODER &= ~(GPIO_MODER_MODE13);

	// Set PA8, PA9, PA10, PA12, PB14, PB15, PC13 to output mode
	GPIOA->MODER |= (GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0
				 | GPIO_MODER_MODE10_0 | GPIO_MODER_MODE12_0); // Set PA8, PA9, PA10, PA12 to output mode
	GPIOB->MODER |= (GPIO_MODER_MODE14_0 | GPIO_MODER_MODE15_0); // Set PB14, PB15 to output mode
	GPIOC->MODER |= (GPIO_MODER_MODE13_0); // Set PC13 to output mode

	// set pulldown resistors to avoid floating inputs
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD8 | GPIO_PUPDR_PUPD9 | GPIO_PUPDR_PUPD10
			| GPIO_PUPDR_PUPD12); // No pull-up/down for PA8, PA9, PA10, PA12
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD14 | GPIO_PUPDR_PUPD15); // No pull-up/down for PB14, PB15
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13); // No

	while (1) {
		HAL_Delay(500); // Delay for 500 ms to make toggling visible

		// Toggle outputs
		GPIOA->ODR ^= (1 << 8) | (1 << 9) | (1 << 10) | (1 << 12); // Toggle PA8, PA9, PA10, PA12
		GPIOB->ODR ^= (1 << 14) | (1 << 15); // Toggle PB14, PB15
		GPIOC->ODR ^= (1 << 13); // Toggle PC13

		// Also toggle the LED on PC6
		GPIOC->ODR ^= (1 << 6); // Toggle PC6

	}
}
